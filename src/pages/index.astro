---
import Layout from '../layouts/Layout.astro'
import { ARC_2023 } from '../data/ARC_2023'
import Map from '../components/Map.astro'
import LocationInfo from '../components/LocationInfo.astro'
import MapGuide from '../components/MapGuide.astro'
import Header from '../components/Header.astro'
import Footer from '../components/Footer.astro'
const { title, description, locations } = ARC_2023
---

<Layout title={title} description={description}>
	<Header />
	<main id='main-page' class='relative w-full h-auto overflow-hidden'>
		{locations.map((location) => <LocationInfo query={location.id} />)}
		<Map />
		<MapGuide />
	</main>
	<Footer fixed />
</Layout>

<script type='module'>
	import { getLocationStyles } from './src/utils/getLocationStyles'

	const mapIcon = document.querySelectorAll('.names')
	const locations = document.querySelectorAll('[aria-label="location-info"]')
	const header = document.querySelector('header').querySelector('div')
	const footer = document.querySelector('footer')
	const logo = document.getElementById('logo-text')
	const downloadScheduleBtn = header.querySelector('span')
	const socialMediaLinks = header.querySelectorAll('#social-networks')
	const mapGuide = document.querySelector('#map-guide')

	const colors = [
		getLocationStyles('pale-purple'),
		getLocationStyles('orange'),
		getLocationStyles('black-pink'),
		getLocationStyles('purple'),
		getLocationStyles('pink'),
		getLocationStyles('yellow'),
		getLocationStyles('blue'),
		getLocationStyles('red'),
		getLocationStyles('pale-blue')
	]

	// const colors = [
	// 	{
	// 		textColor: 'text-pale-purple',
	// 		fillColor: 'fill-pale-purple',
	// 		bgColor: 'bg-pale-purple',
	// 		hoverColor: 'hover:text-pale-purple'
	// 	},
	// 	{
	// 		textColor: 'text-orange',
	// 		fillColor: 'fill-orange',
	// 		bgColor: 'bg-orange',
	// 		hoverColor: 'hover:text-orange'
	// 	},
	// 	{
	// 		textColor: 'text-black-pink',
	// 		fillColor: 'fill-black-pink',
	// 		bgColor: 'bg-black-pink',
	// 		hoverColor: 'hover:text-black-pink'
	// 	},
	// 	{
	// 		textColor: 'text-purple',
	// 		fillColor: 'fill-purple',
	// 		bgColor: 'bg-purple',
	// 		hoverColor: 'hover:text-purple'
	// 	},
	// 	{
	// 		textColor: 'text-pink',
	// 		fillColor: 'fill-pink',
	// 		bgColor: 'bg-pink',
	// 		hoverColor: 'hover:text-pink'
	// 	},
	// 	{
	// 		textColor: 'text-yellow',
	// 		fillColor: 'fill-yellow',
	// 		bgColor: 'bg-yellow',
	// 		hoverColor: 'hover:text-yellow'
	// 	},
	// 	{
	// 		textColor: 'text-blue',
	// 		fillColor: 'fill-blue',
	// 		bgColor: 'bg-blue',
	// 		hoverColor: 'hover:text-blue'
	// 	},
	// 	{
	// 		textColor: 'text-red',
	// 		fillColor: 'fill-red',
	// 		bgColor: 'bg-red',
	// 		hoverColor: 'hover:text-red'
	// 	},
	// 	{
	// 		textColor: 'text-pale-blue',
	// 		fillColor: 'fill-pale-blue',
	// 		bgColor: 'bg-pale-blue',
	// 		hoverColor: 'hover:text-pale-blue'
	// 	}
	// ]

	function changeElementStyles(change, index) {
		const changeBackgroundElements = [header, footer, downloadScheduleBtn, mapGuide]
		if (change) {
			changeBackgroundElements.forEach((element) => {
				element.classList.add(colors[index].backgroundColor)
			})
			logo.classList.add(colors[index].fillColor)
			logo.classList.remove('fill-main')
			socialMediaLinks.forEach((link) => {
				link.classList.remove('hover:text-main')
				link.classList.add(colors[index].hoverTextColor)
			})
		} else {
			changeBackgroundElements.forEach((element) => {
				element.classList.remove(colors[index].backgroundColor)
			})
			logo.classList.remove(colors[index].fillColor)
			logo.classList.add('fill-main')
			socialMediaLinks.forEach((link) => {
				link.classList.remove(colors[index].hoverTextColor)
				link.classList.add('hover:text-main')
			})
		}
	}

	function showLocationsInfo(element, show) {
		if (show) {
			element.style.right = '0'
			element.style.zIndex = '20'
			element.style.opacity = '1'
		} else {
			element.style.zIndex = '10'
			element.style.right = '-448px'
		}
	}

	mapIcon.forEach((icon, index) =>
		icon.addEventListener('click', () => {
			locations.forEach((location, index) => {
				showLocationsInfo(location, false, index)
				changeElementStyles(false, index)
			})
			showLocationsInfo(locations[index], true, index)
			changeElementStyles(true, index)
		})
	)

	mapIcon.forEach((icon, index) =>
		icon.addEventListener('touchend', () => {
			locations.forEach((location) => {
				showLocationsInfo(location, false, index)
				changeElementStyles(false, index)
			})
			showLocationsInfo(locations[index], true, index)
			changeElementStyles(true, index)
		})
	)

	locations.forEach((location, index) => {
		location.addEventListener(
			'transitionend',
			(e) => {
				if (location !== e.target) return
				if (location.style.right === '-448px') {
					location.style.opacity = '0'
				}
			},
			false
		)
		location.querySelector('button').addEventListener('click', () => {
			showLocationsInfo(location, false, index)
			changeElementStyles(false, index)
		})
	})
</script>
