---
import Layout from '../layouts/Layout.astro'
import { ARC_2023 } from '../data/ARC_2023'
import Map from '../components/Map.astro'
import LocationInfo from '../components/LocationInfo.astro'
import MapGuide from '../components/MapGuide.astro'
import Header from '../components/Header.astro'
import Footer from '../components/Footer.astro'
import ButtonLink from '@components/ButtonLink.astro'
const { title, description, locations } = ARC_2023
---

<Layout title={title} description={description}>
	<Header />
	<main id='main-page' class='relative w-full h-auto overflow-hidden'>
		{locations.map((location) => <LocationInfo query={location.id} />)}
		<Map />
		<ButtonLink
			id='reset-button'
			style={{ opacity: '0' }}
			invertedColors
			className='fixed mx-auto bottom-14 md:bottom-20 left-0 right-0'
		>
			Volver a Centrar
		</ButtonLink>
		<MapGuide />
	</main>
	<Footer fixed />
</Layout>

<script>
	import { getStylesByColor } from '../utils'
	const footer = document.querySelector('footer')
	const header = document.querySelector('header').querySelector('div')
	const logo = document.querySelector('header').querySelector('#logo-text')
	const navbar = document.querySelector('nav')
	const downloadScheduleBtn = header.querySelector('span')
	const socialMediaLinks = header.querySelectorAll('#social-networks')
	const mapLabels = document.querySelectorAll('.names')
	const locationsInfo = document.querySelectorAll < HTMLElement > ('[aria-label="location-info"]')
	const resetButton = document.querySelector('#reset-button')
	const spanResetButton = resetButton.querySelector('span')

	const colors = [
		getStylesByColor('pale-purple'),
		getStylesByColor('orange'),
		getStylesByColor('black-pink'),
		getStylesByColor('purple'),
		getStylesByColor('pink'),
		getStylesByColor('yellow'),
		getStylesByColor('blue'),
		getStylesByColor('red'),
		getStylesByColor('pale-blue')
	]

	function changeElementStyles(index, change) {
		const changeBackgroundElements = [header, footer, downloadScheduleBtn, navbar, resetButton]
		if (change) {
			changeBackgroundElements.forEach((element) => {
				element.classList.add(colors[index].backgroundColor)
			})
			spanResetButton.classList.add(colors[index].borderColor, colors[index].textColor)
			spanResetButton.classList.remove('border-main', 'text-main')
			logo.classList.add(colors[index].fillColor)
			logo.classList.remove('fill-main')
			socialMediaLinks.forEach((link) => {
				link.classList.remove('hover:text-main')
				link.classList.add(colors[index].hoverTextColor)
			})
		} else {
			changeBackgroundElements.forEach((element) => {
				element.classList.remove(colors[index].backgroundColor)
			})
			spanResetButton.classList.remove(colors[index].borderColor, colors[index].textColor)
			spanResetButton.classList.add('border-main', 'text-main')
			logo.classList.remove(colors[index].fillColor)
			logo.classList.add('fill-main')
			socialMediaLinks.forEach((link) => {
				link.classList.remove(colors[index].hoverTextColor)
				link.classList.add('hover:text-main')
			})
		}
	}

	function showLocationsInfo(element, show) {
		if (show) {
			element.style.right = '0'
			element.style.zIndex = '20'
			element.style.opacity = '1'
		} else {
			element.style.zIndex = '10'
			element.style.right = '-448px'
		}
	}

	mapLabels.forEach((icon, index) =>
		['mouseup', 'touchend'].forEach((event) =>
			icon.addEventListener(event, () => {
				locationsInfo.forEach((location, index) => {
					showLocationsInfo(location, false)
					changeElementStyles(index, false)
				})
				showLocationsInfo(locationsInfo[index], true)
				changeElementStyles(index, true)
			})
		)
	)

	locationsInfo.forEach((location, index) => {
		const closeLocationInfoButton = location.querySelector('button')
		location.addEventListener(
			'transitionend',
			(e) => {
				if (location !== e.target) return
				if (location.style.right === '-448px') {
					location.style.opacity = '0'
					closeLocationInfoButton.removeEventListener('click', () => {
						showLocationsInfo(location, false)
						changeElementStyles(index, false)
					})
				}
			},
			false
		)
		closeLocationInfoButton.addEventListener('click', () => {
			showLocationsInfo(location, false)
			changeElementStyles(index, false)
		})
	})
</script>
