---
import Mapa from './icons/Mapa.astro'
---

<section id='map-container' class='w-screen h-screen relative'>
	<div
		id='map'
		class='absolute w-[150%] h-fit sm:w-1/2 top-0 right-0 sm:left-0 -left-20 bottom-0 m-auto origin-top-left'
	>
		<Mapa />
	</div>
</section>

<script>
	const map = document.querySelector < HTMLElement > ('#map')
	const svgContainer = document.querySelector('#map-container')

	let dx = 0
	let dy = 0
	let scale = 1
	let panning = 0
	let lastPoints = []

	function update() {
		map.style.transform = `translate(${dx}px, ${dy}px) scale(${scale})`
	}

	function getXY(obj) {
		return {
			x: obj.pageX,
			y: obj.pageY
		}
	}

	function touchDistance(touch1, touch2) {
		const dx = Math.abs(touch2.x - touch1.x)
		const dy = Math.abs(touch2.y - touch1.y)
		return Math.hypot(dx, dy)
	}

	function getMidpoint(point1, point2) {
		return {
			x: (point1.x + point2.x) / 2,
			y: (point1.y + point2.y) / 2
		}
	}

	function onWheel(event) {
		event.preventDefault()

		const { left, top } = map.getBoundingClientRect()
		let delta = event.deltaY

		if (event.deltaMode === 1) {
			delta *= 15
		}

		const scaleDiff = delta / 600 + 1
		// avoid to-small or big values
		if (scale * scaleDiff <= 0.76) return
		if (scale * scaleDiff >= 3.63) return

		scale *= scaleDiff
		dx -= (event.pageX - left) * (scaleDiff - 1)
		dy -= (event.pageY - top) * (scaleDiff - 1)
		update()
	}

	function getPoints(event) {
		return event.touches ? [...event.touches].map((touch) => getXY(touch)) : [getXY(event)]
	}

	function onPointerDown(event) {
		if (event.type === 'mousedown' && event.button !== 0) return
		event.preventDefault()

		lastPoints = getPoints(event)
		panning++

		if (panning === 1) {
			document.addEventListener('mousemove', onPointerMove)
			document.addEventListener('mouseup', onPointerUp)
			document.addEventListener('touchmove', onPointerMove)
			document.addEventListener('touchend', onPointerUp)
		}
	}

	const onPointerMove = (event) => {
		event.preventDefault()
		const points = getPoints(event)
		const averagePoint = points.reduce(getMidpoint)
		const averageLastPoint = lastPoints.reduce(getMidpoint)
		const { left, top } = map.getBoundingClientRect()

		dx += averagePoint.x - averageLastPoint.x
		dy += averagePoint.y - averageLastPoint.y

		if (points[1]) {
			const scaleDiff =
				touchDistance(points[0], points[1]) / touchDistance(lastPoints[0], lastPoints[1])
			if (scale * scaleDiff < 0.8) {
				scale = 0.8
			} else if (scale * scaleDiff > 3.8) {
				scale = 3.8
			} else {
				scale *= scaleDiff
				dx -= (averagePoint.x - left) * (scaleDiff - 1)
				dy -= (averagePoint.y - top) * (scaleDiff - 1)
			}
		}

		update()
		lastPoints = points
	}

	const onPointerUp = (event) => {
		event.preventDefault()
		panning--
		lastPoints.pop()

		if (panning) {
			lastPoints = getPoints(event)
			return
		}

		document.removeEventListener('mousemove', onPointerMove)
		document.removeEventListener('mouseup', onPointerUp)
		document.removeEventListener('touchmove', onPointerMove)
		document.removeEventListener('touchend', onPointerUp)
	}

	// bound events
	svgContainer.addEventListener('mousedown', onPointerDown)
	svgContainer.addEventListener('touchstart', onPointerDown)

	// unbound
	svgContainer.addEventListener('wheel', (event) => onWheel(event))

	// fn
	// function reset() {
	// 	dx = 0
	// 	dy = 0
	// 	scale = 1
	// 	update()
	// }
</script>
